# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "magic-wormhole" %}
{% set version = "0.9.1" %}
{% set sha256 = "c4471b5dfb5f802024659553974f2bd414b690f907d63a4cdc17d0caba112172" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ name }}-{{ version }}.tar.gz
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for Python 2.7, 3.4, and above, for all major OSs.
  # Add the line "skip: True  # [py<34]" (for example) to limit to Python 3.4 and newer, or "skip: True  # [not win]" to limit to Windows.
  script: python setup.py install --single-version-externally-managed --record record.txt

requirements:
  build:
    - python
    # When setuptools is available add the `--single-version-externally-managed --record record.txt` above.
    - setuptools
    # if your project compiles code (such as a C extension) then add `toolchain` as a build requirement.
    - toolchain
    - twisted
    - spake2 ==0.7
    - pynacl
    - six
    - twisted
    - autobahn >=0.14.1
    - hkdf
    - tqdm
    - click
    - humanize
    
  run:
    - python

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  commands:
    - python -m wormhole.test.run_trial {posargs:wormhole}


about:
  home: http://github.com/simplejson/simplejson
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: MIT
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: MIT
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE
  summary: 'Simple, fast, extensible JSON encoder/decoder for Python'

  # The remaining entries in this section are optional, but recommended
  description: |
    Get things from one computer to another, safely. This package provides a library and a command-line tool named wormhole, which makes it possible to get short pieces of text (and arbitrary-sized files and directories) from one computer to another. The two endpoints are identified by using identical "wormhole codes": in general, the sending machine generates and displays the code, which must then be typed into the receiving machine. The codes are short and human-pronounceable, using a phonetically-distinct wordlist. The receiving side offers tab-completion on the codewords, so usually only a few characters must be typed. Wormhole codes are single-use and do not need to be memorized.
  doc_url: https://github.com/warner/magic-wormhole
  dev_url: https://github.com/warner/magic-wormhole

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - CJ-Wright
